# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads (1 group; 1x "get", 3x "inc" in each group), will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_15_Asymmetric.g

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 79.861 ±(99.9%) 216.502 ns/op
# Warmup Iteration   2: 80.885 ±(99.9%) 201.190 ns/op
# Warmup Iteration   3: 65.671 ±(99.9%) 169.251 ns/op
# Warmup Iteration   4: 72.506 ±(99.9%) 229.861 ns/op
# Warmup Iteration   5: 79.468 ±(99.9%) 317.550 ns/op
Iteration   1: 70.444 ±(99.9%) 206.852 ns/op
                 get: 23.415 ns/op
                 inc: 86.120 ±(99.9%) 144.266 ns/op

Iteration   2: 72.689 ±(99.9%) 244.328 ns/op
                 get: 29.964 ns/op
                 inc: 86.930 ±(99.9%) 555.596 ns/op

Iteration   3: 68.309 ±(99.9%) 181.618 ns/op
                 get: 31.479 ns/op
                 inc: 80.585 ±(99.9%) 305.601 ns/op

Iteration   4: 71.295 ±(99.9%) 189.585 ns/op
                 get: 35.692 ns/op
                 inc: 83.162 ±(99.9%) 385.328 ns/op

Iteration   5: 78.034 ±(99.9%) 297.618 ns/op
                 get: 38.478 ns/op
                 inc: 91.219 ±(99.9%) 843.701 ns/op



Result "org.openjdk.jmh.samples.JMHSample_15_Asymmetric.g":
  72.154 ±(99.9%) 14.057 ns/op [Average]
  (min, avg, max) = (68.309, 72.154, 78.034), stdev = 3.651
  CI (99.9%): [58.097, 86.211] (assumes normal distribution)

Secondary result "org.openjdk.jmh.samples.JMHSample_15_Asymmetric.g:get":
  31.805 ±(99.9%) 22.248 ns/op [Average]
  (min, avg, max) = (23.415, 31.805, 38.478), stdev = 5.778
  CI (99.9%): [9.557, 54.054] (assumes normal distribution)

Secondary result "org.openjdk.jmh.samples.JMHSample_15_Asymmetric.g:inc":
  85.603 ±(99.9%) 15.487 ns/op [Average]
  (min, avg, max) = (80.585, 85.603, 91.219), stdev = 4.022
  CI (99.9%): [70.116, 101.091] (assumes normal distribution)


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt   Score    Error  Units
JMHSample_15_Asymmetric.g      avgt    5  72.154 ± 14.057  ns/op
JMHSample_15_Asymmetric.g:get  avgt    5  31.805 ± 22.248  ns/op
JMHSample_15_Asymmetric.g:inc  avgt    5  85.603 ± 15.487  ns/op

# 在Benchmark的类名和方法名中间,多了组的名字
其中,g代表了g组的整体性能,g:方法 代表了具体方法的性能
神奇的功能