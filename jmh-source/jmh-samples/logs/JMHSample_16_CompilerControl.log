# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_16_CompilerControl.baseline

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
Iteration   1: 0.455 ns/op
Iteration   2: 0.442 ns/op
Iteration   3: 0.448 ns/op


Result "org.openjdk.jmh.samples.JMHSample_16_CompilerControl.baseline":
  0.448 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (0.442, 0.448, 0.455), stdev = 0.006
  CI (99.9%): [0.336, 0.561] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_16_CompilerControl.blank

# Run progress: 20.00% complete, ETA 00:02:01
# Fork: 1 of 1
Iteration   1: 0.446 ns/op
Iteration   2: 0.452 ns/op
Iteration   3: 0.446 ns/op


Result "org.openjdk.jmh.samples.JMHSample_16_CompilerControl.blank":
  0.448 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (0.446, 0.448, 0.452), stdev = 0.004
  CI (99.9%): [0.383, 0.513] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_16_CompilerControl.dontinline

# Run progress: 40.00% complete, ETA 00:01:31
# Fork: 1 of 1
Iteration   1: 3.277 ns/op
Iteration   2: 3.296 ns/op
Iteration   3: 2.708 ns/op


Result "org.openjdk.jmh.samples.JMHSample_16_CompilerControl.dontinline":
  3.094 ±(99.9%) 6.098 ns/op [Average]
  (min, avg, max) = (2.708, 3.094, 3.296), stdev = 0.334
  CI (99.9%): [≈ 0, 9.192] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_16_CompilerControl.exclude

# Run progress: 60.00% complete, ETA 00:01:00
# Fork: 1 of 1
Iteration   1: 120.470 ns/op
Iteration   2: 118.357 ns/op
Iteration   3: 110.300 ns/op


Result "org.openjdk.jmh.samples.JMHSample_16_CompilerControl.exclude":
  116.376 ±(99.9%) 97.913 ns/op [Average]
  (min, avg, max) = (110.300, 116.376, 120.470), stdev = 5.367
  CI (99.9%): [18.462, 214.289] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_16_CompilerControl.inline

# Run progress: 80.00% complete, ETA 00:00:30
# Fork: 1 of 1
Iteration   1: 0.469 ns/op
Iteration   2: 0.465 ns/op
Iteration   3: 0.461 ns/op


Result "org.openjdk.jmh.samples.JMHSample_16_CompilerControl.inline":
  0.465 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (0.461, 0.465, 0.469), stdev = 0.004
  CI (99.9%): [0.385, 0.544] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt    Score    Error  Units
JMHSample_16_CompilerControl.baseline    avgt    3    0.448 ±  0.112  ns/op
JMHSample_16_CompilerControl.blank       avgt    3    0.448 ±  0.065  ns/op
JMHSample_16_CompilerControl.dontinline  avgt    3    3.094 ±  6.098  ns/op
JMHSample_16_CompilerControl.exclude     avgt    3  116.376 ± 97.913  ns/op
JMHSample_16_CompilerControl.inline      avgt    3    0.465 ±  0.079  ns/op

# 方法里的内容都是空