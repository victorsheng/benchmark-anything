# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_04_DefaultState.measure

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 242886137.139 ops/s
# Warmup Iteration   2: 257263472.996 ops/s
# Warmup Iteration   3: 249687755.179 ops/s
# Warmup Iteration   4: 250277302.775 ops/s
# Warmup Iteration   5: 259614784.824 ops/s
Iteration   1: 262276343.350 ops/s
Iteration   2: 243068874.067 ops/s
Iteration   3: 238897793.895 ops/s
Iteration   4: 244503534.057 ops/s
Iteration   5: 236561181.265 ops/s


Result "org.openjdk.jmh.samples.JMHSample_04_DefaultState.measure":
  245061545.327 ±(99.9%) 39026585.254 ops/s [Average]
  (min, avg, max) = (236561181.265, 245061545.327, 262276343.350), stdev = 10135080.256
  CI (99.9%): [206034960.072, 284088130.581] (assumes normal distribution)


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt          Score          Error  Units
JMHSample_04_DefaultState.measure  thrpt    5  245061545.327 ± 39026585.254  ops/s
