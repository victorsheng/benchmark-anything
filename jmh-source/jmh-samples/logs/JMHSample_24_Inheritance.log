# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkCos.bench

# Run progress: 0.00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 373.495 ns/op
# Warmup Iteration   2: 420.471 ns/op
# Warmup Iteration   3: 165.538 ns/op
# Warmup Iteration   4: 182.522 ns/op
# Warmup Iteration   5: 167.279 ns/op
Iteration   1: 164.380 ns/op
Iteration   2: 166.058 ns/op
Iteration   3: 166.209 ns/op
Iteration   4: 162.835 ns/op
Iteration   5: 163.064 ns/op


Result "org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkCos.bench":
  164.509 ±(99.9%) 6.148 ns/op [Average]
  (min, avg, max) = (162.835, 164.509, 166.209), stdev = 1.597
  CI (99.9%): [158.361, 170.657] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkLog.bench

# Run progress: 33.33% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 49.775 ns/op
# Warmup Iteration   2: 44.319 ns/op
# Warmup Iteration   3: 53.495 ns/op
# Warmup Iteration   4: 40.209 ns/op
# Warmup Iteration   5: 43.162 ns/op
Iteration   1: 43.761 ns/op
Iteration   2: 46.216 ns/op
Iteration   3: 49.280 ns/op
Iteration   4: 52.114 ns/op
Iteration   5: 49.619 ns/op


Result "org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkLog.bench":
  48.198 ±(99.9%) 12.499 ns/op [Average]
  (min, avg, max) = (43.761, 48.198, 52.114), stdev = 3.246
  CI (99.9%): [35.699, 60.697] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkSin.bench

# Run progress: 66.67% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 422.417 ns/op
# Warmup Iteration   2: 430.107 ns/op
# Warmup Iteration   3: 277.139 ns/op
# Warmup Iteration   4: 234.420 ns/op
# Warmup Iteration   5: 308.130 ns/op
Iteration   1: 252.204 ns/op
Iteration   2: 234.202 ns/op
Iteration   3: 233.181 ns/op
Iteration   4: 226.748 ns/op
Iteration   5: 226.841 ns/op


Result "org.openjdk.jmh.samples.JMHSample_24_Inheritance.BenchmarkSin.bench":
  234.635 ±(99.9%) 40.106 ns/op [Average]
  (min, avg, max) = (226.748, 234.635, 252.204), stdev = 10.415
  CI (99.9%): [194.529, 274.741] (assumes normal distribution)


# Run complete. Total time: 00:00:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt    Score    Error  Units
JMHSample_24_Inheritance.BenchmarkCos.bench  avgt    5  164.509 ±  6.148  ns/op
JMHSample_24_Inheritance.BenchmarkLog.bench  avgt    5   48.198 ± 12.499  ns/op
JMHSample_24_Inheritance.BenchmarkSin.bench  avgt    5  234.635 ± 40.106  ns/op
