# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureWrong_1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ s/op
# Warmup Iteration   2: ≈ 10⁻⁵ s/op
# Warmup Iteration   3: ≈ 10⁻⁵ s/op
# Warmup Iteration   4: ≈ 10⁻⁵ s/op
# Warmup Iteration   5: ≈ 10⁻⁵ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op


Result "org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureWrong_1":
  ≈ 10⁻⁵ s/op


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureWrong_5

# Run progress: 16.66% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ s/op
# Warmup Iteration   2: ≈ 10⁻⁴ s/op
# Warmup Iteration   3: ≈ 10⁻⁴ s/op
# Warmup Iteration   4: ≈ 10⁻⁴ s/op
# Warmup Iteration   5: ≈ 10⁻⁴ s/op
Iteration   1: ≈ 10⁻⁴ s/op
Iteration   2: ≈ 10⁻⁴ s/op
Iteration   3: ≈ 10⁻⁴ s/op
Iteration   4: ≈ 10⁻⁴ s/op
Iteration   5: ≈ 10⁻⁴ s/op


Result "org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureWrong_5":
  ≈ 10⁻⁴ s/op


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, single-shot each, 5000 calls per op
# Measurement: 5 iterations, single-shot each, 5000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureRight

# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 s/op
# Warmup Iteration   2: 0.016 s/op
# Warmup Iteration   3: 0.015 s/op
# Warmup Iteration   4: 0.015 s/op
# Warmup Iteration   5: 0.014 s/op
Iteration   1: 0.022 s/op
Iteration   2: 0.021 s/op
Iteration   3: 0.016 s/op
Iteration   4: 0.016 s/op
Iteration   5: 0.016 s/op


Result "org.openjdk.jmh.samples.JMHSample_26_BatchSize.measureRight":
  N = 5
  mean =      0.018 ±(99.9%) 0.011 s/op

  Histogram, s/op:
    [0.015, 0.016) = 0 
    [0.016, 0.016) = 1 
    [0.016, 0.017) = 2 
    [0.017, 0.017) = 0 
    [0.017, 0.017) = 0 
    [0.017, 0.018) = 0 
    [0.018, 0.019) = 0 
    [0.019, 0.019) = 0 
    [0.019, 0.020) = 0 
    [0.020, 0.020) = 0 
    [0.020, 0.020) = 0 
    [0.020, 0.021) = 1 
    [0.021, 0.022) = 0 

  Percentiles百分, s/op:
      p(0.0000) =      0.016 s/op
     p(50.0000) =      0.016 s/op
     p(90.0000) =      0.022 s/op
     p(95.0000) =      0.022 s/op
     p(99.0000) =      0.022 s/op
     p(99.9000) =      0.022 s/op
     p(99.9900) =      0.022 s/op
     p(99.9990) =      0.022 s/op
     p(99.9999) =      0.022 s/op
    p(100.0000) =      0.022 s/op


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt   Score    Error  Units
JMHSample_26_BatchSize.measureWrong_1  avgt    5  ≈ 10⁻⁵            s/op
JMHSample_26_BatchSize.measureWrong_5  avgt    5  ≈ 10⁻⁴            s/op
JMHSample_26_BatchSize.measureRight      ss    5   0.018 ±  0.011   s/op
