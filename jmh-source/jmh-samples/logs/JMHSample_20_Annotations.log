# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.openjdk.jmh.samples.JMHSample_20_Annotations.measure

# Run progress: 0.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 27.419 ops/us
# Warmup Iteration   2: 23.417 ops/us
# Warmup Iteration   3: 27.758 ops/us
# Warmup Iteration   4: 28.357 ops/us
# Warmup Iteration   5: 25.077 ops/us
Iteration   1: 26.409 ops/us
Iteration   2: 26.198 ops/us
Iteration   3: 20.764 ops/us
Iteration   4: 27.367 ops/us
Iteration   5: 28.995 ops/us


Result "org.openjdk.jmh.samples.JMHSample_20_Annotations.measure":
  25.947 ±(99.9%) 11.939 ops/us [Average]
  (min, avg, max) = (20.764, 25.947, 28.995), stdev = 3.101
  CI (99.9%): [14.007, 37.886] (assumes normal distribution)


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt   Score    Error   Units
JMHSample_20_Annotations.measure  thrpt    5  25.947 ± 11.939  ops/us
