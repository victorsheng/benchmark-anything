# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_12_Forking.measure_4_forked_c1

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 1
# Warmup Iteration   1: 6.508 ns/op
# Warmup Iteration   2: 6.966 ns/op
# Warmup Iteration   3: 5.962 ns/op
# Warmup Iteration   4: 6.136 ns/op
# Warmup Iteration   5: 6.170 ns/op
Iteration   1: 5.769 ns/op
Iteration   2: 5.925 ns/op
Iteration   3: 6.053 ns/op
Iteration   4: 6.197 ns/op
Iteration   5: 5.924 ns/op


Result "org.openjdk.jmh.samples.JMHSample_12_Forking.measure_4_forked_c1":
  5.974 ±(99.9%) 0.618 ns/op [Average]
  (min, avg, max) = (5.769, 5.974, 6.197), stdev = 0.161
  CI (99.9%): [5.355, 6.592] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_12_Forking.measure_5_forked_c2

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 7.032 ns/op
# Warmup Iteration   2: 7.077 ns/op
# Warmup Iteration   3: 5.741 ns/op
# Warmup Iteration   4: 5.899 ns/op
# Warmup Iteration   5: 5.681 ns/op
Iteration   1: 5.461 ns/op
Iteration   2: 5.674 ns/op
Iteration   3: 6.028 ns/op
Iteration   4: 5.862 ns/op
Iteration   5: 5.643 ns/op


Result "org.openjdk.jmh.samples.JMHSample_12_Forking.measure_5_forked_c2":
  5.734 ±(99.9%) 0.838 ns/op [Average]
  (min, avg, max) = (5.461, 5.734, 6.028), stdev = 0.218
  CI (99.9%): [4.895, 6.572] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_12_Forking.measure_1_c1

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 3.871 ns/op
# Warmup Iteration   2: 3.973 ns/op
# Warmup Iteration   3: 3.939 ns/op
# Warmup Iteration   4: 3.950 ns/op
# Warmup Iteration   5: 3.937 ns/op
Iteration   1: 3.963 ns/op
Iteration   2: 3.950 ns/op
Iteration   3: 3.960 ns/op
Iteration   4: 3.920 ns/op
Iteration   5: 3.907 ns/op

Result "org.openjdk.jmh.samples.JMHSample_12_Forking.measure_1_c1":
  3.940 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (3.907, 3.940, 3.963), stdev = 0.025
  CI (99.9%): [3.843, 4.037] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_12_Forking.measure_2_c2

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 28.901 ns/op
# Warmup Iteration   2: 29.678 ns/op
# Warmup Iteration   3: 28.071 ns/op
# Warmup Iteration   4: 28.475 ns/op
# Warmup Iteration   5: 27.537 ns/op
Iteration   1: 28.388 ns/op
Iteration   2: 28.261 ns/op
Iteration   3: 28.340 ns/op
Iteration   4: 28.282 ns/op
Iteration   5: 28.221 ns/op

Result "org.openjdk.jmh.samples.JMHSample_12_Forking.measure_2_c2":
  28.298 ±(99.9%) 0.253 ns/op [Average]
  (min, avg, max) = (28.221, 28.298, 28.388), stdev = 0.066
  CI (99.9%): [28.045, 28.551] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_12_Forking.measure_3_c1_again

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 27.052 ns/op
# Warmup Iteration   2: 28.994 ns/op
# Warmup Iteration   3: 27.627 ns/op
# Warmup Iteration   4: 27.234 ns/op
# Warmup Iteration   5: 27.948 ns/op
Iteration   1: 27.824 ns/op
Iteration   2: 27.655 ns/op
Iteration   3: 27.609 ns/op
Iteration   4: 27.356 ns/op
Iteration   5: 27.770 ns/op

Result "org.openjdk.jmh.samples.JMHSample_12_Forking.measure_3_c1_again":
  27.643 ±(99.9%) 0.702 ns/op [Average]
  (min, avg, max) = (27.356, 27.643, 27.824), stdev = 0.182
  CI (99.9%): [26.941, 28.345] (assumes normal distribution)


# Run complete. Total time: 00:08:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt   Score   Error  Units
JMHSample_12_Forking.measure_1_c1         avgt    5   3.940 ± 0.097  ns/op
JMHSample_12_Forking.measure_2_c2         avgt    5  28.298 ± 0.253  ns/op
JMHSample_12_Forking.measure_3_c1_again   avgt    5  27.643 ± 0.702  ns/op
JMHSample_12_Forking.measure_4_forked_c1  avgt    5   5.974 ± 0.618  ns/op
JMHSample_12_Forking.measure_5_forked_c2  avgt    5   5.734 ± 0.838  ns/op
