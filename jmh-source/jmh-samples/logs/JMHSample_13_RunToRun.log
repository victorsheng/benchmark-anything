# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_13_RunToRun.baseline

# Run progress: 0.00% complete, ETA 00:13:00
# Fork: 1 of 1
Iteration   1: 563.109 ms/op
Iteration   2: 563.105 ms/op
Iteration   3: 563.096 ms/op


Result "org.openjdk.jmh.samples.JMHSample_13_RunToRun.baseline":
  563.103 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (563.096, 563.103, 563.109), stdev = 0.007
  CI (99.9%): [562.981, 563.226] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_13_RunToRun.fork_1

# Run progress: 3.85% complete, ETA 00:12:50
# Fork: 1 of 5
Iteration   1: 323.097 ms/op
Iteration   2: 323.090 ms/op
Iteration   3: 323.087 ms/op

# Run progress: 7.69% complete, ETA 00:12:15
# Fork: 2 of 5
Iteration   1: 832.102 ms/op
Iteration   2: 832.104 ms/op
Iteration   3: 832.089 ms/op

# Run progress: 11.54% complete, ETA 00:12:01
# Fork: 3 of 5
Iteration   1: 819.110 ms/op
Iteration   2: 819.104 ms/op
Iteration   3: 819.095 ms/op

# Run progress: 15.38% complete, ETA 00:11:34
# Fork: 4 of 5
Iteration   1: 390.104 ms/op
Iteration   2: 390.088 ms/op
Iteration   3: 390.092 ms/op

# Run progress: 19.23% complete, ETA 00:10:59
# Fork: 5 of 5
Iteration   1: 778.101 ms/op
Iteration   2: 778.096 ms/op
Iteration   3: 778.100 ms/op


Result "org.openjdk.jmh.samples.JMHSample_13_RunToRun.fork_1":
  628.498 ±(99.9%) 247.575 ms/op [Average]
  (min, avg, max) = (323.087, 628.498, 832.104), stdev = 231.581
  CI (99.9%): [380.923, 876.072] (assumes normal distribution)


# JMH version: 1.22-SNAPSHOT
# VM version: JDK 1.8.0_112, Java HotSpot(TM) 64-Bit Server VM, 25.112-b15
# VM invoker: /home/hadoop/jdk1.8.0_112/jre/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_13_RunToRun.fork_2

# Run progress: 23.08% complete, ETA 00:10:25
# Fork: 1 of 20
Iteration   1: 371.097 ms/op
Iteration   2: 371.091 ms/op
Iteration   3: 371.087 ms/op

# Run progress: 26.92% complete, ETA 00:09:52
# Fork: 2 of 20
Iteration   1: 38.097 ms/op
Iteration   2: 38.081 ms/op
Iteration   3: 38.077 ms/op

# Run progress: 30.77% complete, ETA 00:09:19
# Fork: 3 of 20
Iteration   1: 307.099 ms/op
Iteration   2: 307.094 ms/op
Iteration   3: 307.091 ms/op

# Run progress: 34.62% complete, ETA 00:08:47
# Fork: 4 of 20
Iteration   1: 465.100 ms/op
Iteration   2: 465.099 ms/op
Iteration   3: 465.093 ms/op

# Run progress: 38.46% complete, ETA 00:08:16
# Fork: 5 of 20
Iteration   1: 869.101 ms/op
Iteration   2: 869.097 ms/op
Iteration   3: 869.096 ms/op

# Run progress: 42.31% complete, ETA 00:07:46
# Fork: 6 of 20
Iteration   1: 498.108 ms/op
Iteration   2: 498.098 ms/op
Iteration   3: 498.101 ms/op

# Run progress: 46.15% complete, ETA 00:07:16
# Fork: 7 of 20
Iteration   1: 764.102 ms/op
Iteration   2: 764.101 ms/op
Iteration   3: 764.092 ms/op

# Run progress: 50.00% complete, ETA 00:06:46
# Fork: 8 of 20
Iteration   1: 775.098 ms/op
Iteration   2: 775.096 ms/op
Iteration   3: 775.093 ms/op

# Run progress: 53.85% complete, ETA 00:06:14
# Fork: 9 of 20
Iteration   1: 301.104 ms/op
Iteration   2: 301.104 ms/op
Iteration   3: 301.100 ms/op

# Run progress: 57.69% complete, ETA 00:05:42
# Fork: 10 of 20
Iteration   1: 803.095 ms/op
Iteration   2: 803.101 ms/op
Iteration   3: 803.096 ms/op

# Run progress: 61.54% complete, ETA 00:05:12
# Fork: 11 of 20
Iteration   1: 309.095 ms/op
Iteration   2: 309.096 ms/op
Iteration   3: 309.091 ms/op

# Run progress: 65.38% complete, ETA 00:04:40
# Fork: 12 of 20
Iteration   1: 311.103 ms/op
Iteration   2: 311.100 ms/op
Iteration   3: 311.099 ms/op

# Run progress: 69.23% complete, ETA 00:04:09
# Fork: 13 of 20
Iteration   1: 285.094 ms/op
Iteration   2: 285.089 ms/op
Iteration   3: 285.091 ms/op

# Run progress: 73.08% complete, ETA 00:03:38
# Fork: 14 of 20
Iteration   1: 84.087 ms/op
Iteration   2: 84.087 ms/op
Iteration   3: 84.115 ms/op

# Run progress: 76.92% complete, ETA 00:03:06
# Fork: 15 of 20
Iteration   1: 646.099 ms/op
Iteration   2: 646.093 ms/op
Iteration   3: 646.090 ms/op

# Run progress: 80.77% complete, ETA 00:02:35
# Fork: 16 of 20
Iteration   1: 754.091 ms/op
Iteration   2: 754.095 ms/op
Iteration   3: 754.100 ms/op

# Run progress: 84.62% complete, ETA 00:02:04
# Fork: 17 of 20
Iteration   1: 594.103 ms/op
Iteration   2: 594.107 ms/op
Iteration   3: 594.102 ms/op

# Run progress: 88.46% complete, ETA 00:01:33
# Fork: 18 of 20
Iteration   1: 488.095 ms/op
Iteration   2: 488.095 ms/op
Iteration   3: 488.096 ms/op

# Run progress: 92.31% complete, ETA 00:01:02
# Fork: 19 of 20
Iteration   1: 615.096 ms/op
Iteration   2: 615.099 ms/op
Iteration   3: 615.093 ms/op

# Run progress: 96.15% complete, ETA 00:00:31
# Fork: 20 of 20
Iteration   1: 53.079 ms/op
Iteration   2: 53.102 ms/op
Iteration   3: 53.076 ms/op


Result "org.openjdk.jmh.samples.JMHSample_13_RunToRun.fork_2":
  466.596 ±(99.9%) 113.094 ms/op [Average]
  (min, avg, max) = (38.077, 466.596, 869.101), stdev = 252.952
  CI (99.9%): [353.501, 579.690] (assumes normal distribution)


# Run complete. Total time: 00:13:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score     Error  Units
JMHSample_13_RunToRun.baseline  avgt    3  563.103 ±   0.122  ms/op
JMHSample_13_RunToRun.fork_1    avgt   15  628.498 ± 247.575  ms/op
JMHSample_13_RunToRun.fork_2    avgt   60  466.596 ± 113.094  ms/op
